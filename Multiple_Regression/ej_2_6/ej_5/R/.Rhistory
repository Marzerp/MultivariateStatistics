setwd("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R")
datos <- read.csv("Liga_nacional_de_futbol.csv")
n <- nrow(datos)
datos
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
summary(seleccion_step)
summary(seleccion_step)
seleccion_step <- step(modelo_nulo,
scope = list(lower = modelo_nulo, upper = modelo_completo),
direction = "forward",
trace = 1)  # trace=1 muestra los pasos
seleccion_step <- step(modelo_nulo,
scope = list(lower = modelo_nulo, upper = modelo_completo),
direction = "forward",
k = qchisq(1 - alpha, 1),  # Esto hace que step use p-valores ≈ alpha
trace = 1)  # trace=1 muestra los pasos
seleccion_step <- step(modelo_nulo,
scope = list(lower = modelo_nulo, upper = modelo_completo),
direction = "forward",
k = qchisq(1 - 0.05, 1),  # Esto hace que step use p-valores ≈ alpha
trace = 1)  # trace=1 muestra los pasos
cat("\nModelo seleccionado por step():\n")
summary(seleccion_step)
datos <- read.csv("Liga_nacional_de_futbol.csv")
# Ver la estructura de los datos
cat("Estructura de los datos:\n")
str(datos)
cat("\n")
# Función para selección hacia atrás basada en p-valores
seleccion_atras_pvalor <- function(datos, alpha = 0.05) {
# Modelo completo con todas las variables
modelo_completo <- lm(y ~ ., data = datos)
variables_actuales <- names(coef(modelo_completo))[-1]  # Excluir intercepto
cat("Iniciando selección hacia atrás...\n")
cat("==================================\n")
cat("Modelo inicial con todas las variables:\n")
print(summary(modelo_completo)$r.squared)
cat("\n")
paso <- 1
modelo_actual <- modelo_completo
while(length(variables_actuales) > 0) {
# Obtener p-valores del modelo actual
resumen_actual <- summary(modelo_actual)
pvalores <- resumen_actual$coefficients[-1, 4]  # Excluir intercepto
names(pvalores) <- variables_actuales
# Encontrar la variable con el p-valor más alto
peor_pvalor <- max(pvalores)
peor_variable <- names(which.max(pvalores))
# Verificar criterio de parada
if(peor_pvalor <= alpha) {
cat("Criterio de parada alcanzado. Todas las variables tienen p-valor <=", alpha, "\n")
break
}
# Eliminar la variable con p-valor más alto
variables_actuales <- setdiff(variables_actuales, peor_variable)
# Crear nueva fórmula
if(length(variables_actuales) == 0) {
formula_nueva <- as.formula("y ~ 1")
} else {
formula_nueva <- as.formula(paste("y ~", paste(variables_actuales, collapse = " + ")))
}
# Ajustar nuevo modelo
modelo_nuevo <- lm(formula_nueva, data = datos)
cat(sprintf("Paso %d: Se eliminó '%s' (p-valor = %.4f)\n",
paso, peor_variable, peor_pvalor))
cat(sprintf("   R² ajustado: %.4f, AIC: %.2f\n",
summary(modelo_nuevo)$adj.r.squared,
AIC(modelo_nuevo)))
modelo_actual <- modelo_nuevo
paso <- paso + 1
}
cat("\n==================================\n")
cat("Selección finalizada\n")
cat("Variables finales:", paste(variables_actuales, collapse = ", "), "\n")
cat("Fórmula final:", paste(deparse(formula(modelo_actual)), collapse = ""), "\n\n")
# Mostrar resumen del modelo final
cat("Resumen del modelo final:\n")
print(summary(modelo_actual))
return(list(modelo = modelo_actual,
variables = variables_actuales,
formula = formula(modelo_actual)))
}
# Función usando step() para selección hacia atrás
seleccion_atras_step <- function(datos) {
cat("Usando la función step() para selección hacia atrás:\n")
cat("===================================================\n")
# Modelo completo
modelo_completo <- lm(y ~ ., data = datos)
# Modelo nulo (solo intercepto)
modelo_nulo <- lm(y ~ 1, data = datos)
# Selección hacia atrás con step()
seleccion_step <- step(modelo_completo,
scope = list(lower = modelo_nulo, upper = modelo_completo),
direction = "backward",
trace = 1)  # trace=1 muestra los pasos
cat("\nModelo seleccionado por step() (backward):\n")
print(summary(seleccion_step))
return(seleccion_step)
}
# Función alternativa con criterio más estricto
seleccion_atras_estricta <- function(datos, alpha = 0.01) {
cat("Selección hacia atrás con criterio estricto (alpha =", alpha, "):\n")
cat("===============================================================\n")
modelo_completo <- lm(y ~ ., data = datos)
variables_actuales <- names(coef(modelo_completo))[-1]
modelo_actual <- modelo_completo
paso <- 1
cambios <- TRUE
while(cambios && length(variables_actuales) > 0) {
cambios <- FALSE
resumen_actual <- summary(modelo_actual)
pvalores <- resumen_actual$coefficients[-1, 4]
names(pvalores) <- variables_actuales
# Verificar si hay variables con p-valor > alpha
variables_a_eliminar <- names(which(pvalores > alpha))
if(length(variables_a_eliminar) > 0) {
# Eliminar la variable con mayor p-valor
peor_variable <- names(which.max(pvalores))
variables_actuales <- setdiff(variables_actuales, peor_variable)
# Actualizar modelo
if(length(variables_actuales) == 0) {
formula_nueva <- as.formula("y ~ 1")
} else {
formula_nueva <- as.formula(paste("y ~", paste(variables_actuales, collapse = " + ")))
}
modelo_nuevo <- lm(formula_nueva, data = datos)
cat(sprintf("Paso %d: Se eliminó '%s' (p-valor = %.4f)\n",
paso, peor_variable, max(pvalores)))
cat(sprintf("   R² ajustado: %.4f\n", summary(modelo_nuevo)$adj.r.squared))
modelo_actual <- modelo_nuevo
cambios <- TRUE
paso <- paso + 1
}
}
cat("\nSelección finalizada\n")
cat("Variables finales:", paste(variables_actuales, collapse = ", "), "\n")
return(modelo_actual)
}
# Ejecutar los diferentes métodos
cat("MÉTODO MANUAL (p-valor < 0.05):\n")
cat("===============================\n")
resultado_manual <- seleccion_atras_pvalor(datos)
cat("\nMÉTODO STEP():\n")
cat("==============\n")
resultado_step <- seleccion_atras_step(datos)
cat("\nMÉTODO ESTRICTO (p-valor < 0.01):\n")
cat("==================================\n")
resultado_estricto <- seleccion_atras_estricta(datos, alpha = 0.01)
# Comparar resultados
cat("\nCOMPARACIÓN DE RESULTADOS:\n")
cat("==========================\n")
cat("Manual (alpha=0.05):", paste(resultado_manual$variables, collapse = ", "), "\n")
cat("Step():", paste(names(coef(resultado_step))[-1], collapse = ", "), "\n")
cat("Estricto (alpha=0.01):", paste(names(coef(resultado_estricto))[-1], collapse = ", "), "\n")
# Análisis de los modelos finales
cat("\nCOMPARACIÓN DE MÉTRICAS:\n")
cat("========================\n")
metricas <- data.frame(
Metodo = c("Manual", "Step", "Estricto"),
Variables = c(length(resultado_manual$variables),
length(names(coef(resultado_step))[-1]),
length(names(coef(resultado_estricto))[-1])),
R2_ajustado = c(summary(resultado_manual$modelo)$adj.r.squared,
summary(resultado_step)$adj.r.squared,
summary(resultado_estricto)$adj.r.squared),
AIC = c(AIC(resultado_manual$modelo),
AIC(resultado_step),
AIC(resultado_estricto))
)
print(metricas)
# Función para análisis de correlación (para entender mejor los datos)
analizar_correlaciones <- function(datos) {
cat("\nANÁLISIS DE CORRELACIONES:\n")
cat("==========================\n")
# Matriz de correlación
cor_matrix <- cor(datos)
cor_with_y <- cor_matrix["y", ]
cat("Correlaciones con la variable y:\n")
print(sort(cor_with_y, decreasing = TRUE))
# Variables altamente correlacionadas entre sí
cat("\nVariables con alta correlación (>0.7) entre sí:\n")
high_corr <- which(abs(cor_matrix) > 0.7 & lower.tri(cor_matrix), arr.ind = TRUE)
for(i in 1:nrow(high_corr)) {
if(high_corr[i,1] != high_corr[i,2]) {
var1 <- rownames(cor_matrix)[high_corr[i,1]]
var2 <- colnames(cor_matrix)[high_corr[i,2]]
cor_value <- cor_matrix[high_corr[i,1], high_corr[i,2]]
cat(sprintf("%s - %s: %.3f\n", var1, var2, cor_value))
}
}
}
# Ejecutar análisis de correlaciones
analizar_correlaciones(datos)
# Función para validación cruzada simple
validacion_cruzada_simple <- function(modelo, datos, k = 5) {
set.seed(123)
n <- nrow(datos)
folds <- sample(rep(1:k, length.out = n))
mse_values <- numeric(k)
for(i in 1:k) {
test_index <- which(folds == i)
train_data <- datos[-test_index, ]
test_data <- datos[test_index, ]
modelo_cv <- update(modelo, data = train_data)
predicciones <- predict(modelo_cv, newdata = test_data)
mse_values[i] <- mean((test_data$y - predicciones)^2)
}
return(mean(mse_values))
}
# Validación cruzada para los modelos
cat("\nVALIDACIÓN CRUZADA (MSE):\n")
cat("=========================\n")
mse_manual <- validacion_cruzada_simple(resultado_manual$modelo, datos)
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
source("~/Documentos/E_MUTIVARIADA/Tareas/ej_2_6/ej_5/R/2_6_ejercicio_5_R.r")
